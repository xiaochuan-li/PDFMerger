# -*- encoding: utf-8 -*-
'''
@File    :   UI.py
@Time    :   2020/12/20 19:14:55
@Author  :   Xiaochuan LI 
@Version :   1.0
@Contact :   lixiaochuan@buua.edu.cn
@License :   (C)Copyright 2020-2021, Lixiaochuan-BUAA-vrlab
@Desc    :   None
'''

# here put the import lib

# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'UI.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from UI.layout import Ui_Form
from UI.pat import Pat_Form
from PyQt5.QtCore import QFileInfo, Qt, pyqtSignal, QFile
from PyQt5.QtGui import QPixmap
import os
DATAPATH = "./data/" if os.path.isdir("./data/") else "./sources/data/"


class LayoutWidget(QtWidgets.QWidget, Ui_Form):
    clicked = pyqtSignal()

    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.setAcceptDrops(True)
        self.files = []
        self.browse = lambda x: self.add(x)

    def add(self, url):
        fileInfo = QFileInfo(QFile(url))
        file_ = PatWidget(fileInfo)
        max_col = self.width()//file_.width()
        self.gridLayout.addWidget(file_, len(
            self.files)//max_col, len(self.files) % max_col, 1, 1)
        self.files.append(file_)

    def dragEnterEvent(self, e):
        # 检测拖曳进来的数据是否包含文本，如有则接受，无则忽略
        if e.mimeData().hasUrls():
            e.accept()
        else:
            e.ignore()
    # 当拖曳操作在其目标控件上被释放时，这个事件将被触发

    def dropEvent(self, e):
        if e.mimeData().hasUrls():
            url = e.mimeData().urls()[0].toLocalFile()
            self.add(url)

    def mouseReleaseEvent(self, QMouseEvent):
        if QMouseEvent.button() == Qt.LeftButton:
            self.clicked.emit()


class PatWidget(QtWidgets.QWidget, Pat_Form):
    checked = True

    def __init__(self, fileinfo, parent=None):
        super().__init__(parent)
        self.setupUi(self)
        self.fileinfo = fileinfo
        pix = QPixmap(DATAPATH+'yes.png')
        self.label.setPixmap(pix)
        self.label.setScaledContents(True)
        self.label_2.setText(fileinfo.baseName())

    def mouseReleaseEvent(self, QMouseEvent):
        if QMouseEvent.button() == Qt.LeftButton:
            self.checked = not self.checked
            if self.checked:
                pix = QPixmap(DATAPATH+'yes.png')
                self.label.setPixmap(pix)
                self.label.setScaledContents(True)
            else:
                pix = QPixmap(DATAPATH+'no.png')
                self.label.setPixmap(pix)
                self.label.setScaledContents(True)


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(589, 551)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(40, 40, 505, 341))
        self.groupBox.setObjectName("groupBox")
        self.gridLayoutWidget = QtWidgets.QWidget(self.groupBox)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(9, 19, 491, 311))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = LayoutWidget(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")

        self.browser = QtWidgets.QPushButton(self.centralwidget)
        self.browser.setGeometry(QtCore.QRect(120, 420, 101, 31))
        self.browser.setObjectName("browser")

        self.line = QtWidgets.QLineEdit(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(240, 420, 240, 31))
        self.line.setObjectName("line")

        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(240, 480, 101, 31))
        self.pushButton.setObjectName("pushButton")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 589, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.groupBox.setTitle(_translate("MainWindow", "GroupBox"))
        self.pushButton.setText(_translate("MainWindow", "submit"))
        self.browser.setText(_translate("MainWindow", "Browser"))
        # self.line.setText(_translate("MainWindow", "PushButton"))
